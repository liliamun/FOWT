import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Constants
mass = 5e5  # Mass of platform (kg)
rotational_inertia = 1e7  # Rotational inertia (kg.m^2)
damping_coefficient_surge = 2e4  # Surge damping coefficient (Ns/m)
stiffness_coefficient_surge = 1e5  # Surge stiffness coefficient (N/m)
nonlinear_stiffness_surge = 5e3  # Nonlinear stiffness coefficient (N/m^3)
damping_coefficient_pitch = 1e5  # Pitch damping coefficient (Ns/rad)
stiffness_coefficient_pitch = 1e6  # Pitch stiffness coefficient (N/rad)
amplitude_wave_force = 1e5  # Maximum wave force (N)
coupling_surge_to_pitch = 1e4  # Coupling from surge to pitch (N.m/m)
coupling_pitch_to_surge = 1e4  # Coupling from pitch to surge (N/rad)

# Wave parameters for base stability analysis
num_waves = 100  # Number of wave components
t =  125 # natural period of the structure in surge (s)
wave_frequencies = np.linspace(0, 1.5, num_waves)  # Wave frequencies (rad/s)
wave_amplitudes = amplitude_wave_force * np.random.rand(num_waves)  # Wave amplitudes
wave_phases = 2 * np.pi * np.random.rand(num_waves)  # Random wave phases

# Current velocity (0.25 m/s, assumed positive in wave propagation direction)
current_velocity = 0.25  # m/s

# Define wave force function
def irregular_wave_force(t, wave_frequencies, wave_amplitudes, wave_phases, current_velocity):
    wave_force = np.sum(wave_amplitudes * np.sin(wave_frequencies * t + wave_phases))
    current_force = current_velocity  # Modify as needed to simulate current force impact
    return wave_force + current_force

# Coupled dynamics function for the platform
def platform_dynamics_coupled(t, y, wave_frequencies, wave_amplitudes, wave_phases, coupling_pitch_to_surge, coupling_surge_to_pitch, current_velocity):
    displacement, velocity, rotation, rotational_velocity = y
    
    # External forces
    external_force = irregular_wave_force(t, wave_frequencies, wave_amplitudes, wave_phases, current_velocity)
    external_torque = 10 * external_force  # Arbitrary scaling for torque

    # Surge dynamics
    mooring_force = -stiffness_coefficient_surge * displacement - nonlinear_stiffness_surge * displacement**3
    acceleration_surge = (external_force - damping_coefficient_surge * velocity +
                          mooring_force - coupling_pitch_to_surge * rotation) / mass

    # Pitch dynamics
    restoring_torque = -stiffness_coefficient_pitch * rotation
    damping_torque = -damping_coefficient_pitch * rotational_velocity
    angular_acceleration_pitch = (external_torque + restoring_torque + damping_torque -
                                   coupling_surge_to_pitch * displacement) / rotational_inertia

    return [velocity, acceleration_surge, rotational_velocity, angular_acceleration_pitch]

# Simulation parameters
t_start = 0
t_end = 200
t_eval = np.linspace(t_start, t_end, 2000)  # Time vector
initial_conditions = [0, 0, 0, 0]  # [displacement, velocity, rotation, rotational_velocity]

# Solve ODE for base wave scenario
solution = solve_ivp(platform_dynamics_coupled, [t_start, t_end], initial_conditions, t_eval=t_eval,
                         args=(wave_frequencies, wave_amplitudes, wave_phases, coupling_pitch_to_surge, coupling_surge_to_pitch, current_velocity))

# Extract solution
t = solution.t
displacement = solution.y[0]
velocity = solution.y[1]
rotation = solution.y[2]
rotational_velocity = solution.y[3]

# Plot results for stability analysis
plt.figure(figsize=(12, 8))

# Surge displacement
plt.subplot(4, 1, 1)
plt.plot(t, displacement, label='Surge Displacement (m)', color='blue')
plt.xlabel('Time (s)')
plt.ylabel('Displacement (m)')
plt.title('Surge Displacement Over Time')
plt.grid()
plt.legend()

# Surge velocity
plt.subplot(4, 1, 2)
plt.plot(t, velocity, label='Surge Velocity (m/s)', color='green')
plt.xlabel('Time (s)')
plt.ylabel('Velocity (m/s)')
plt.title('Surge Velocity Over Time')
plt.grid()
plt.legend()

# Pitch rotation
plt.subplot(4, 1, 3)
plt.plot(t, rotation, label='Pitch Rotation (rad)', color='magenta')
plt.xlabel('Time (s)')
plt.ylabel('Rotation (rad)')
plt.title('Pitch Rotation Over Time')
plt.grid()
plt.legend()

# Pitch angular velocity
plt.subplot(4, 1, 4)
plt.plot(t, rotational_velocity, label='Pitch Angular Velocity (rad/s)', color='red')
plt.xlabel('Time (s)')
plt.ylabel('Angular Velocity (rad/s)')
plt.title('Pitch Angular Velocity Over Time')
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()

# Evaluate coupling effects by varying coefficients
coupling_values = [0, 1e4, 5e4]  # Test values for coupling coefficients
results = []

# Simulate for each coupling value
for coupling in coupling_values:
    solution = solve_ivp(platform_dynamics_coupled, [t_start, t_end], initial_conditions, t_eval=t_eval,
                         args=(wave_frequencies, wave_amplitudes, wave_phases, coupling, coupling, current_velocity))
    results.append(solution.y)

# Plot comparison of surge displacement for different coupling values
plt.figure(figsize=(10, 6))
for idx, coupling in enumerate(coupling_values):
    print(results[idx][0])
    plt.plot(t, results[idx][0], label=f"Coupling {coupling} N路m/m")

plt.xlabel('Time (s)')
plt.ylabel('Surge Displacement (m)')
plt.title('Effect of Coupling on Surge Displacement')
plt.legend()
plt.grid()
plt.show()

# Plot comparison of pitch rotation for different coupling values
plt.figure(figsize=(10, 6))
for idx, coupling in enumerate(coupling_values):
    print(results[idx][2])
    plt.plot(t, results[idx][2], label=f"Coupling {coupling} N路m/m")

plt.xlabel('Time (s)')
plt.ylabel('Pitch Rotation (rad)')
plt.title('Effect of Coupling on Pitch Rotation')
plt.legend()
plt.grid()
plt.show()

# Energy Analysis for Different Coupling Values
kinetic_energies = []
potential_energies = []
total_energies = []

for idx, coupling in enumerate(coupling_values):
    displacement = results[idx][0]
    velocity = results[idx][1]
    rotation = results[idx][2]
    rotational_velocity = results[idx][3]

    # Calculate energy components
    kinetic_energy = 0.5 * mass * velocity**2 + 0.5 * rotational_inertia * rotational_velocity**2
    potential_energy = (0.5 * stiffness_coefficient_surge * displacement**2 +
                        0.5 * stiffness_coefficient_pitch * rotation**2 +
                        0.25 * nonlinear_stiffness_surge * displacement**4)
    total_energy = kinetic_energy + potential_energy

    kinetic_energies.append(kinetic_energy)
    potential_energies.append(potential_energy)
    total_energies.append(total_energy)

# Plot Energy Analysis
plt.figure(figsize=(12, 8))
for idx, coupling in enumerate(coupling_values):
    print(total_energies)
    plt.plot(t, total_energies[idx], label=f"Coupling {coupling} N路m/m")

plt.xlabel('Time (s)')
plt.ylabel('Total Energy (J)')
plt.title('Total Energy for Different Coupling Values')
plt.legend()
plt.grid()
plt.show()

# Optimize Mooring System: Vary stiffness and damping coefficients
stiffness_values = [1e5, 2e5, 5e5]  # Test different stiffness coefficients (N/m)
damping_values = [1e4, 2e4, 5e4]  # Test different damping coefficients (Ns/m)
mooring_results = []

# Simulate for each combination of stiffness and damping values
for stiffness in stiffness_values:
    for damping in damping_values:
        def mooring_dynamics(t, y):
            displacement, velocity, rotation, rotational_velocity = y

            # External forces
            external_force = irregular_wave_force(t, wave_frequencies, wave_amplitudes, wave_phases, current_velocity)
            external_torque = 10 * external_force

            # Surge dynamics
            mooring_force = -stiffness * displacement - nonlinear_stiffness_surge * displacement**3
            acceleration_surge = (external_force - damping * velocity +
                                  mooring_force - coupling_pitch_to_surge * rotation) / mass

            # Pitch dynamics
            restoring_torque = -stiffness_coefficient_pitch * rotation
            damping_torque = -damping_coefficient_pitch * rotational_velocity
            angular_acceleration_pitch = (external_torque + restoring_torque + damping_torque -
                                           coupling_surge_to_pitch * displacement) / rotational_inertia

            return [velocity, acceleration_surge, rotational_velocity, angular_acceleration_pitch]

        # Solve ODE for this parameter set
        sol = solve_ivp(mooring_dynamics, [t_start, t_end], initial_conditions, t_eval=t_eval)
        mooring_results.append((stiffness, damping, sol.y))

# Plot the effect of stiffness and damping on surge displacement
plt.figure(figsize=(12, 8))
for result in mooring_results:
    stiffness, damping, y = result
    plt.plot(t, y[0], label=f"Stiffness {stiffness} N/m, Damping {damping} Ns/m")

plt.xlabel('Time (s)')
plt.ylabel('Surge Displacement (m)')
plt.title('Effect of Mooring Stiffness and Damping on Surge Displacement')
plt.legend()
plt.grid()
plt.show()

# Frequency domain analysis using Fourier Transform
from scipy.fft import fft, fftfreq

plt.figure(figsize=(12, 8))

for idx, coupling in enumerate(coupling_values):
    # Perform FFT on surge displacement
    surge_fft = fft(results[idx][0])
    surge_freq = fftfreq(len(t), d=(t[1] - t[0]))  # Compute frequency axis
    print(surge_freq, surge_fft)
    # Plot magnitude spectrum for surge displacement
    plt.plot(surge_freq[:len(surge_fft)//2], np.abs(surge_fft[:len(surge_fft)//2]),
             label=f"Coupling {coupling} N路m/m")

plt.xlabel('Frequency (Hz)')
plt.ylabel('Amplitude')
plt.title('Frequency Spectrum of Surge Displacement')
plt.legend()
plt.grid()
plt.show()
